<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programmings on CS 368</title>
    <link>https://cs368-stanford.github.io/spring2022/programming.html</link>
    <description>Recent content in Programmings on CS 368</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://cs368-stanford.github.io/spring2022/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PAssignment 1: F0 and F2 estimation</title>
      <link>https://cs368-stanford.github.io/spring2022/programming/prog-1.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs368-stanford.github.io/spring2022/programming/prog-1.html</guid>
      <description>Getting started  In this assignment you will implement some of the F0 and F2 estimators we covered in class. The assignment will be autograded on gradescope, and you will be able to see your grades after you submit. You are also allowed up to 44 submissions (that&amp;rsquo;s 1 per day from the time of release until June 1).
To make things more fun, we are also running a public scoreboard!</description>
    </item>
    
    <item>
      <title>PAssignment 2: Heavy-hitters and adversarial streams</title>
      <link>https://cs368-stanford.github.io/spring2022/programming/prog-2.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs368-stanford.github.io/spring2022/programming/prog-2.html</guid>
      <description>Getting started  In this assignment you will implement the CountSketch and CountMin algorithm we covered in class. The assignment will be autograded on gradescope, and you will be able to see your grades after you submit. As in Programming Assignment 1, You are allowed up to 44 submissions.
To make things more fun, we are also running a public scoreboard! The scoreboard will rank by the amount of memory you use in your solutions (you can be anonymous in this scoreboard).</description>
    </item>
    
    <item>
      <title>PAssignment 3: A (2&#43;Ïµ)-approximation for maximum weight matching in the semi-streaming model</title>
      <link>https://cs368-stanford.github.io/spring2022/programming/prog-3.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cs368-stanford.github.io/spring2022/programming/prog-3.html</guid>
      <description>Getting started  In this assignment you will implement the a recent advancement in the semi-streaming model for computing a maximum weight matching. The assignment will be autograded on gradescope, and you will be able to see your grades after you submit. As in Programming Assignment 1 and 2, you are allowed up to 62 submissions and there will be a public scoreboard!
The starter template is here and the setup process is the same as the previous assignments (here and here).</description>
    </item>
    
  </channel>
</rss>
